=======================================
Terraform:
=================================================

Download and setup terraform on MASTER NODE:
===========================================

https://developer.hashicorp.com/terraform/downloads

# sudo su -

# wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
# echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
# sudo apt update && sudo apt install terraform

#terraform –version

======================================

Setup the AWS provider
==================================

Connect to AWS lab and create an IAM user with access key and secret key

===================================

Create
 the terraform configuration file with provider block

=================================


# mkdir myterraformfiles
# cd myterraformfiles
# vim provider_aws.tf


# configure AWS provider

provider "aws" {
  region = "us-east-1"
  access_key = "AKIAUJU24ZR3Q2NT7VOR"
  secret_key = "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"
}


Save the file

# terraform init

=================================
Demo: Ftech the accesskey and secret key from shared credentials file of aws

===================================

# apt-get update
# apt  install awscli 
# aws configure
Give value for access_key
Press enter
Give value for secret key, press enter
No need to give region or format option.

Now credentials for AWS will be set in the .aws directory.

You can check the credentials at 

# cd ~/.aws
# ls


Now go the folder where we have TF config file

# cd myterraformfiles

# vim provider_aws.tf

Remove accesskey and secret key

Add below text

 shared_credentials_files = ["~/.aws/credentials"]


The code should look like:

# configure AWS provider

provider "aws" {
  region = "us-east-1"
  shared_credentials_files = ["~/.aws/credentials"]
}


Execute below command

# terraform init



Demo 3: EC2 resource creation using terraform:

Add the below code in the existing procider_aws.tf file.

resource "aws_instance" "myec2" {
  ami           = "ami-0bb4c991fa89d4b9b"
  instance_type = "t2.micro"

  tags = {
    Name = "Instance1"
  }
}


# terraform apply

Give yes

It will create the resource on AWS

===================================

Demo 4: Data block to pass filtered data to the resource block


# configure AWS provider

provider "aws" {
  region = "us-east-1"
  shared_credentials_files = ["~/.aws/credentials"]
}

# data block will filter data and pass it on to the resoruce block

data "aws_ami" "my-ami" {
  most_recent = true
  owners      = ["amazon"]

  filter {
    name   = "name"
    values = ["amzn2-ami-hvm*"]
  }
}

resource "aws_instance" "myec2" {
  ami           = data.aws_ami.my-ami.id
  instance_type = "t2.micro"

  tags = {
    Name = "Instance1"
  }
}


Save the file and execute 

# terraform apply

Give yes for approval

AWS instance will be created.

========================================

Demo 5: Create a new resource block for elastic Ip in AWS

# vim eip_aws.tf

resource "aws_eip" "myeip" {
  vpc = true
}


[Or]

resource "aws_eip" "myeip" {
  domain = “vpc”
}


# terraform apply -auto-approve

Associate this elastic ip to the existing Ec2 instance
==========================================
In the same file eip_aws.tf add the below association:

resource "aws_eip_association" "eip_assoc" {
  instance_id   = aws_instance.myec2.id
  allocation_id = aws_eip.myeip.id
}


Save the file

# terraform apply


Output block to print attribute values upon creation of resource:

# vim output-demo.tf

output "eipvalue" {

value = aws_eip.myeip.public_ip 
}

output "eipallocationid" {

value = aws_eip.myeip.allocation_id

}

output "aws_instance_status"{ 

value = aws_instance.myec2.instance_state

}

output "aws_instance_publicip" {

value = aws_instance.myec2.public_ip
}

# terraform apply

You will see the output values.

===================================

# mkdir variable-demo
# cd variable-demo

# vim variables.tf

variable "access_key"{

default = "AKIAUJU24ZR36YGWPS3D"

}

variable "secret_key" {

default = "37a4jeARDewK7EDBVzpLfvZni/gv5dq+iSYmYfGE"

}

variable "ami" {

default = "ami-0261755bbcb8c4a84"

}

variable "instance_type" {

default = "t2.micro"

}



# vim aws_variable.tf

provider "aws" {
  region = "us-east-1"
  access_key = var.access_key
  secret_key = var.secret_key
}

resource "aws_instance" "myec2" {
  ami           = var.ami
  instance_type = var.instance_type

  tags = {
    Name = "Instance1"
  }
}

# terraform plan


Create terraform.tfvars file

# vim terraform.tfvars

Instance_type = “t2.large”


Again execute terraform plan, actual value is picked up.


============================================================

Dynamic block in terraform:


provider "aws" {
  region     = "us-east-1"
  shared_credentials_files = ["~/.aws/credentials"]
}

variable "sg_ports"{
type = list(number)
default = [8080,8989,80,7878]
}

resource "aws_security_group" "allow_tls" {
  name        = "allow_tls"
  description = "Allow TLS inbound traffic"


  dynamic "ingress" {
    for_each = var.sg_ports
    iterator = port
    content{
    description      = "TLS from VPC"
    from_port        = port.value
    to_port          = port.value
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
}
}
================================================

Provisioner: remote-exec


resource "aws_vpc" "sl-vpc" {
  cidr_block = "10.0.0.0/16"
  tags = {
  Name = "sl-vpc"
}
}

resource "aws_subnet" "subnet-1" {
  vpc_id     = aws_vpc.sl-vpc.id
  cidr_block = "10.0.1.0/24"
  map_public_ip_on_launch = true
  depends_on = [aws_vpc.sl-vpc ]

  tags = {
    Name = "subnet-1"
  }
}

resource "aws_route_table" "sl-route-table" {
  vpc_id = aws_vpc.sl-vpc.id
   tags = {
  Name = "sl-route-table"
}
}
resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.subnet-1.id
  route_table_id = aws_route_table.sl-route-table.id
}

resource "aws_internet_gateway" "sl-gw" {
  vpc_id = aws_vpc.sl-vpc.id

  tags = {
    Name = "sl-gw"
  }
}

resource "aws_route" "sl-route" {
  route_table_id            = aws_route_table.sl-route-table.id
  destination_cidr_block    = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.sl-gw.id
}

resource "aws_internet_gateway" "sl-gw" {
  vpc_id = aws_vpc.sl-vpc.id

  tags = {
    Name = "sl-gw"
  }
}

resource "aws_route" "sl-route" {
  route_table_id            = aws_route_table.sl-route-table.id
  destination_cidr_block    = "0.0.0.0/0"
  gateway_id = aws_internet_gateway.sl-gw.id
}

resource "aws_security_group" "sl-sg" {
  name        = "allow_tls"
  description = "Allow TLS inbound traffic"
  vpc_id      = aws_vpc.sl-vpc.id

  ingress {
    description      = "TLS from VPC"
    from_port        = 443
    to_port          = 443
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  
  }
 ingress {
    description      = "TLS from VPC"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

 ingress {
    description      = "TLS from VPC"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }
  egress {
    from_port        = 0
    to_port          = 0
    protocol         = "-1"
    cidr_blocks      = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "allow_tls"
  }
}

resource "tls_private_key" "web-key" {
  algorithm = "RSA"
 
}

resource "aws_key_pair" "mykey" {
  key_name   = "web-key"
  public_key = tls_private_key.web-key.public_key_openssh
}

resource "local_file" "web-key" {

content = tls_private_key.web-key.private_key_pem
filename = "web-key.pem"
}

resource "aws_instance" "web" {
  ami           = "ami-01eccbf80522b562b"
  instance_type = "t2.micro"
  subnet_id = aws_subnet.subnet-1.id
  key_name = "web-key"
  security_groups = [aws_security_group.sl-sg.id]
  tags = {
    Name = "WebServer"
  }

provisioner "remote-exec" {

 connection {
    type     = "ssh"
    user     = "ec2-user"
    private_key = tls_private_key.web-key.private_key_pem
    host     = self.public_ip
  }
inline = [
 "sudo yum install httpd php -y",
 "sudo systemctl start httpd",
 "sudo systemctl enable httpd"
]

}

}
